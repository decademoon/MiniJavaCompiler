// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  AJRON
// DateTime: 2016-03-11 2:19:35 PM
// UserName: twitc
// Input file <C:\Users\twitc\OneDrive\Business\School\CSEPMP\2016_01\Project\csep501-16wi-af\Compiler\\language\MiniJava.Language.grammar.y - 2016-03-11 2:19:06 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Compiler;
using Compiler.Ast;

namespace Compiler.Language
{
internal enum Token {error=2,EOF=3,Unrecognized=4,Comment=5,Display=6,
    Class=7,Integer=8,StringLiteral=9,Public=10,Static=11,Void=12,
    Null=13,Main=14,New=15,Extends=16,If=17,Else=18,
    While=19,For=20,Return=21,This=22,Instanceof=23,Int=24,
    Boolean=25,Println=26,Destroy=27,Readln=28,Exception=29,Atol=30,
    String=31,Plus=32,Minus=33,Becomes=34,Multiply=35,Divide=36,
    Less=37,Greater=38,LessEqual=39,GreaterEqual=40,Equal=41,NotEqual=42,
    Not=43,Mod=44,And=45,Or=46,PlusPlus=47,MinusMinus=48,
    PlusBecomes=49,MinusBecomes=50,MultiplyBecomes=51,DivideBecomes=52,ModBecomes=53,LParenthesis=54,
    RParenthesis=55,LBracket=56,RBracket=57,LBrace=58,RBrace=59,Length=60,
    True=61,False=62,Dot=63,Comma=64,Semicolon=65,Identifier=66};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<Compiler.Ast.Node,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public Compiler.Ast.Node yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Compiler.Ast.Node val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class MiniJavaParser: ShiftReduceParser<Compiler.Ast.Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[89];
  private static State[] states = new State[204];
  private static string[] nonTerms = new string[] {
      "GOAL", "$accept", "MAIN_CLASS", "CLASS_LIST", "STATEMENT", "CLASS_DECLARATION", 
      "CLASS_EXTENSION", "CLASS_DECLARATION_LIST", "DECLARATION", "VAR_DECLARATION", 
      "METHOD_DECLARATION", "STATEMENT_LIST", "TYPE", "ARGUMENT", "ARGUMENT_LIST", 
      "CONTINUED_ARGUMENT_LIST", "EXPRESSION", "SP_EXPRESSION_STATEMENT", "EXPRESSION_STATEMENT", 
      "EXPRESSION_LIST", "CONTINUED_EXPR_LIST", "PAR_EXPRESSION", };

  static MiniJavaParser() {
    states[0] = new State(new int[]{7,189},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-5,new int[]{-4,4});
    states[4] = new State(new int[]{7,6,3,-2},new int[]{-6,5});
    states[5] = new State(-4);
    states[6] = new State(new int[]{66,7});
    states[7] = new State(new int[]{16,187,58,-8},new int[]{-7,8});
    states[8] = new State(new int[]{58,9});
    states[9] = new State(-10,new int[]{-8,10});
    states[10] = new State(new int[]{59,11,24,17,25,20,31,21,66,22,10,24},new int[]{-9,12,-10,13,-13,14,-11,23});
    states[11] = new State(-6);
    states[12] = new State(-9);
    states[13] = new State(-11);
    states[14] = new State(new int[]{66,15});
    states[15] = new State(new int[]{65,16});
    states[16] = new State(-15);
    states[17] = new State(new int[]{56,18,66,-25});
    states[18] = new State(new int[]{57,19});
    states[19] = new State(-23);
    states[20] = new State(-24);
    states[21] = new State(-26);
    states[22] = new State(-27);
    states[23] = new State(-12);
    states[24] = new State(new int[]{12,181,24,17,25,20,31,21,66,22},new int[]{-13,25});
    states[25] = new State(new int[]{66,26});
    states[26] = new State(new int[]{54,27});
    states[27] = new State(new int[]{24,17,25,20,31,21,66,22,55,-18},new int[]{-15,28,-14,175,-13,179});
    states[28] = new State(new int[]{55,29});
    states[29] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,30,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[30] = new State(-21);
    states[31] = new State(-28);
    states[32] = new State(new int[]{66,33});
    states[33] = new State(new int[]{65,16,34,34});
    states[34] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,35,-19,95,-22,96});
    states[35] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-36});
    states[36] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,37,-19,95,-22,96});
    states[37] = new State(new int[]{45,-61,46,-61,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-61,57,-61,64,-61,55,-61});
    states[38] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,39,-19,95,-22,96});
    states[39] = new State(new int[]{45,36,46,-62,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-62,57,-62,64,-62,55,-62});
    states[40] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,41,-19,95,-22,96});
    states[41] = new State(new int[]{45,-63,46,-63,37,-63,38,-63,39,-63,40,-63,23,-63,42,-63,41,-63,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-63,57,-63,64,-63,55,-63});
    states[42] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,43,-19,95,-22,96});
    states[43] = new State(new int[]{45,-64,46,-64,37,-64,38,-64,39,-64,40,-64,23,-64,42,-64,41,-64,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-64,57,-64,64,-64,55,-64});
    states[44] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,45,-19,95,-22,96});
    states[45] = new State(new int[]{45,-65,46,-65,37,-65,38,-65,39,-65,40,-65,23,-65,42,-65,41,-65,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-65,57,-65,64,-65,55,-65});
    states[46] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,47,-19,95,-22,96});
    states[47] = new State(new int[]{45,-66,46,-66,37,-66,38,-66,39,-66,40,-66,23,-66,42,-66,41,-66,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-66,57,-66,64,-66,55,-66});
    states[48] = new State(new int[]{66,49});
    states[49] = new State(-67);
    states[50] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,51,-19,95,-22,96});
    states[51] = new State(new int[]{45,-68,46,-68,37,40,38,42,39,44,40,46,23,48,42,-68,41,-68,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-68,57,-68,64,-68,55,-68});
    states[52] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,53,-19,95,-22,96});
    states[53] = new State(new int[]{45,-69,46,-69,37,40,38,42,39,44,40,46,23,48,42,-69,41,-69,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-69,57,-69,64,-69,55,-69});
    states[54] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,55,-19,95,-22,96});
    states[55] = new State(new int[]{45,-71,46,-71,37,-71,38,-71,39,-71,40,-71,23,-71,42,-71,41,-71,32,-71,33,-71,44,58,36,60,35,62,56,64,63,69,65,-71,57,-71,64,-71,55,-71});
    states[56] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,57,-19,95,-22,96});
    states[57] = new State(new int[]{45,-72,46,-72,37,-72,38,-72,39,-72,40,-72,23,-72,42,-72,41,-72,32,-72,33,-72,44,58,36,60,35,62,56,64,63,69,65,-72,57,-72,64,-72,55,-72});
    states[58] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,59,-19,95,-22,96});
    states[59] = new State(new int[]{45,-73,46,-73,37,-73,38,-73,39,-73,40,-73,23,-73,42,-73,41,-73,32,-73,33,-73,44,-73,36,-73,35,-73,56,64,63,69,65,-73,57,-73,64,-73,55,-73});
    states[60] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,61,-19,95,-22,96});
    states[61] = new State(new int[]{45,-74,46,-74,37,-74,38,-74,39,-74,40,-74,23,-74,42,-74,41,-74,32,-74,33,-74,44,-74,36,-74,35,-74,56,64,63,69,65,-74,57,-74,64,-74,55,-74});
    states[62] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,63,-19,95,-22,96});
    states[63] = new State(new int[]{45,-75,46,-75,37,-75,38,-75,39,-75,40,-75,23,-75,42,-75,41,-75,32,-75,33,-75,44,-75,36,-75,35,-75,56,64,63,69,65,-75,57,-75,64,-75,55,-75});
    states[64] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,65,-19,95,-22,96});
    states[65] = new State(new int[]{57,66,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[66] = new State(new int[]{34,67,56,-76,45,-76,46,-76,37,-76,38,-76,39,-76,40,-76,23,-76,42,-76,41,-76,32,-76,33,-76,44,-76,36,-76,35,-76,63,-76,65,-76,57,-76,64,-76,55,-76});
    states[67] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,68,-19,95,-22,96});
    states[68] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-39,57,-39,64,-39,55,-39});
    states[69] = new State(new int[]{60,70,66,71});
    states[70] = new State(-77);
    states[71] = new State(new int[]{54,72});
    states[72] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122,55,-57},new int[]{-20,73,-17,75,-19,95,-22,96});
    states[73] = new State(new int[]{55,74});
    states[74] = new State(-40);
    states[75] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,64,-59,55,-59},new int[]{-21,76});
    states[76] = new State(new int[]{64,77,55,-56});
    states[77] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,78,-19,95,-22,96});
    states[78] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,64,-58,55,-58});
    states[79] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,80,-19,95,-22,96});
    states[80] = new State(new int[]{45,-70,46,-70,37,-70,38,-70,39,-70,40,-70,23,-70,42,-70,41,-70,32,-70,33,-70,44,-70,36,-70,35,-70,56,64,63,69,65,-70,57,-70,64,-70,55,-70});
    states[81] = new State(-78);
    states[82] = new State(-79);
    states[83] = new State(-80);
    states[84] = new State(-81);
    states[85] = new State(-82);
    states[86] = new State(new int[]{34,87,47,127,48,128,49,129,50,131,51,133,52,135,53,137,45,-83,46,-83,37,-83,38,-83,39,-83,40,-83,23,-83,42,-83,41,-83,32,-83,33,-83,44,-83,36,-83,35,-83,56,-83,63,-83,65,-83,57,-83,64,-83,55,-83});
    states[87] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,88,-19,95,-22,96});
    states[88] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-38,57,-38,64,-38,55,-38});
    states[89] = new State(-84);
    states[90] = new State(new int[]{24,91,66,124});
    states[91] = new State(new int[]{56,92});
    states[92] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,93,-19,95,-22,96});
    states[93] = new State(new int[]{57,94,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[94] = new State(-85);
    states[95] = new State(-87);
    states[96] = new State(-88);
    states[97] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,98,-19,95,-22,96});
    states[98] = new State(new int[]{55,99,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[99] = new State(-60);
    states[100] = new State(new int[]{54,101});
    states[101] = new State(new int[]{55,104,43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,102,-19,95,-22,96});
    states[102] = new State(new int[]{55,103,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[103] = new State(-41);
    states[104] = new State(-42);
    states[105] = new State(new int[]{54,106});
    states[106] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,107,-19,95,-22,96});
    states[107] = new State(new int[]{55,108,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[108] = new State(-43);
    states[109] = new State(new int[]{54,110});
    states[110] = new State(new int[]{55,111});
    states[111] = new State(-44);
    states[112] = new State(new int[]{54,113});
    states[113] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,114,-19,95,-22,96});
    states[114] = new State(new int[]{55,115,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[115] = new State(-45);
    states[116] = new State(new int[]{54,117});
    states[117] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,118,-19,95,-22,96});
    states[118] = new State(new int[]{55,119,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[119] = new State(-46);
    states[120] = new State(new int[]{66,121});
    states[121] = new State(-49);
    states[122] = new State(new int[]{66,123});
    states[123] = new State(-50);
    states[124] = new State(new int[]{54,125});
    states[125] = new State(new int[]{55,126});
    states[126] = new State(-86);
    states[127] = new State(-47);
    states[128] = new State(-48);
    states[129] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,130,-19,95,-22,96});
    states[130] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-51,57,-51,64,-51,55,-51});
    states[131] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,132,-19,95,-22,96});
    states[132] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-52,57,-52,64,-52,55,-52});
    states[133] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,134,-19,95,-22,96});
    states[134] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-53,57,-53,64,-53,55,-53});
    states[135] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,136,-19,95,-22,96});
    states[136] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-54,57,-54,64,-54,55,-54});
    states[137] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,138,-19,95,-22,96});
    states[138] = new State(new int[]{45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69,65,-55,57,-55,64,-55,55,-55});
    states[139] = new State(new int[]{34,87,47,127,48,128,49,129,50,131,51,133,52,135,53,137,66,-27,56,-83,45,-83,46,-83,37,-83,38,-83,39,-83,40,-83,23,-83,42,-83,41,-83,32,-83,33,-83,44,-83,36,-83,35,-83,63,-83});
    states[140] = new State(-14,new int[]{-12,141});
    states[141] = new State(new int[]{59,142,24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,143,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[142] = new State(-29);
    states[143] = new State(-13);
    states[144] = new State(new int[]{54,145});
    states[145] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,146,-19,95,-22,96});
    states[146] = new State(new int[]{55,147,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[147] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,148,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[148] = new State(new int[]{18,149});
    states[149] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,150,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[150] = new State(-30);
    states[151] = new State(new int[]{54,152});
    states[152] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,153,-19,95,-22,96});
    states[153] = new State(new int[]{55,154,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[154] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,155,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[155] = new State(-31);
    states[156] = new State(new int[]{54,157});
    states[157] = new State(new int[]{24,17,25,20,31,21,66,139,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-18,158,-13,173,-19,171,-17,172,-22,96});
    states[158] = new State(new int[]{65,159});
    states[159] = new State(new int[]{43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,160,-19,95,-22,96});
    states[160] = new State(new int[]{65,161,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[161] = new State(new int[]{66,86,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-19,162,-17,172,-22,96});
    states[162] = new State(new int[]{55,163,56,-87,45,-87,46,-87,37,-87,38,-87,39,-87,40,-87,23,-87,42,-87,41,-87,32,-87,33,-87,44,-87,36,-87,35,-87,63,-87});
    states[163] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,164,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[164] = new State(-32);
    states[165] = new State(new int[]{65,168,43,79,8,81,9,82,61,83,62,84,13,85,66,86,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-17,166,-19,95,-22,96});
    states[166] = new State(new int[]{65,167,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,56,64,63,69});
    states[167] = new State(-33);
    states[168] = new State(-34);
    states[169] = new State(new int[]{65,170});
    states[170] = new State(-35);
    states[171] = new State(new int[]{65,-37,56,-87,45,-87,46,-87,37,-87,38,-87,39,-87,40,-87,23,-87,42,-87,41,-87,32,-87,33,-87,44,-87,36,-87,35,-87,63,-87});
    states[172] = new State(new int[]{56,64,45,36,46,38,37,40,38,42,39,44,40,46,23,48,42,50,41,52,32,54,33,56,44,58,36,60,35,62,63,69});
    states[173] = new State(new int[]{66,174});
    states[174] = new State(new int[]{34,34});
    states[175] = new State(-20,new int[]{-16,176});
    states[176] = new State(new int[]{64,177,55,-17});
    states[177] = new State(new int[]{24,17,25,20,31,21,66,22},new int[]{-14,178,-13,179});
    states[178] = new State(-19);
    states[179] = new State(new int[]{66,180});
    states[180] = new State(-16);
    states[181] = new State(new int[]{66,182});
    states[182] = new State(new int[]{54,183});
    states[183] = new State(new int[]{24,17,25,20,31,21,66,22,55,-18},new int[]{-15,184,-14,175,-13,179});
    states[184] = new State(new int[]{55,185});
    states[185] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,186,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[186] = new State(-22);
    states[187] = new State(new int[]{66,188});
    states[188] = new State(-7);
    states[189] = new State(new int[]{66,190});
    states[190] = new State(new int[]{58,191});
    states[191] = new State(new int[]{10,192});
    states[192] = new State(new int[]{11,193});
    states[193] = new State(new int[]{12,194});
    states[194] = new State(new int[]{14,195});
    states[195] = new State(new int[]{54,196});
    states[196] = new State(new int[]{31,197});
    states[197] = new State(new int[]{56,198});
    states[198] = new State(new int[]{57,199});
    states[199] = new State(new int[]{66,200});
    states[200] = new State(new int[]{55,201});
    states[201] = new State(new int[]{24,17,25,20,31,21,66,139,58,140,17,144,19,151,20,156,21,165,43,79,8,81,9,82,61,83,62,84,13,85,22,89,15,90,54,97,26,100,27,105,28,109,29,112,30,116,47,120,48,122},new int[]{-5,202,-10,31,-13,32,-18,169,-19,171,-17,172,-22,96});
    states[202] = new State(new int[]{59,203});
    states[203] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{7,66,58,10,11,12,14,54,31,56,57,66,55,-5,59});
    rules[4] = new Rule(-4, new int[]{-4,-6});
    rules[5] = new Rule(-4, new int[]{});
    rules[6] = new Rule(-6, new int[]{7,66,-7,58,-8,59});
    rules[7] = new Rule(-7, new int[]{16,66});
    rules[8] = new Rule(-7, new int[]{});
    rules[9] = new Rule(-8, new int[]{-8,-9});
    rules[10] = new Rule(-8, new int[]{});
    rules[11] = new Rule(-9, new int[]{-10});
    rules[12] = new Rule(-9, new int[]{-11});
    rules[13] = new Rule(-12, new int[]{-12,-5});
    rules[14] = new Rule(-12, new int[]{});
    rules[15] = new Rule(-10, new int[]{-13,66,65});
    rules[16] = new Rule(-14, new int[]{-13,66});
    rules[17] = new Rule(-15, new int[]{-14,-16});
    rules[18] = new Rule(-15, new int[]{});
    rules[19] = new Rule(-16, new int[]{-16,64,-14});
    rules[20] = new Rule(-16, new int[]{});
    rules[21] = new Rule(-11, new int[]{10,-13,66,54,-15,55,-5});
    rules[22] = new Rule(-11, new int[]{10,12,66,54,-15,55,-5});
    rules[23] = new Rule(-13, new int[]{24,56,57});
    rules[24] = new Rule(-13, new int[]{25});
    rules[25] = new Rule(-13, new int[]{24});
    rules[26] = new Rule(-13, new int[]{31});
    rules[27] = new Rule(-13, new int[]{66});
    rules[28] = new Rule(-5, new int[]{-10});
    rules[29] = new Rule(-5, new int[]{58,-12,59});
    rules[30] = new Rule(-5, new int[]{17,54,-17,55,-5,18,-5});
    rules[31] = new Rule(-5, new int[]{19,54,-17,55,-5});
    rules[32] = new Rule(-5, new int[]{20,54,-18,65,-17,65,-19,55,-5});
    rules[33] = new Rule(-5, new int[]{21,-17,65});
    rules[34] = new Rule(-5, new int[]{21,65});
    rules[35] = new Rule(-5, new int[]{-18,65});
    rules[36] = new Rule(-18, new int[]{-13,66,34,-17});
    rules[37] = new Rule(-18, new int[]{-19});
    rules[38] = new Rule(-19, new int[]{66,34,-17});
    rules[39] = new Rule(-19, new int[]{-17,56,-17,57,34,-17});
    rules[40] = new Rule(-19, new int[]{-17,63,66,54,-20,55});
    rules[41] = new Rule(-19, new int[]{26,54,-17,55});
    rules[42] = new Rule(-19, new int[]{26,54,55});
    rules[43] = new Rule(-19, new int[]{27,54,-17,55});
    rules[44] = new Rule(-19, new int[]{28,54,55});
    rules[45] = new Rule(-19, new int[]{29,54,-17,55});
    rules[46] = new Rule(-19, new int[]{30,54,-17,55});
    rules[47] = new Rule(-19, new int[]{66,47});
    rules[48] = new Rule(-19, new int[]{66,48});
    rules[49] = new Rule(-19, new int[]{47,66});
    rules[50] = new Rule(-19, new int[]{48,66});
    rules[51] = new Rule(-19, new int[]{66,49,-17});
    rules[52] = new Rule(-19, new int[]{66,50,-17});
    rules[53] = new Rule(-19, new int[]{66,51,-17});
    rules[54] = new Rule(-19, new int[]{66,52,-17});
    rules[55] = new Rule(-19, new int[]{66,53,-17});
    rules[56] = new Rule(-20, new int[]{-17,-21});
    rules[57] = new Rule(-20, new int[]{});
    rules[58] = new Rule(-21, new int[]{-21,64,-17});
    rules[59] = new Rule(-21, new int[]{});
    rules[60] = new Rule(-22, new int[]{54,-17,55});
    rules[61] = new Rule(-17, new int[]{-17,45,-17});
    rules[62] = new Rule(-17, new int[]{-17,46,-17});
    rules[63] = new Rule(-17, new int[]{-17,37,-17});
    rules[64] = new Rule(-17, new int[]{-17,38,-17});
    rules[65] = new Rule(-17, new int[]{-17,39,-17});
    rules[66] = new Rule(-17, new int[]{-17,40,-17});
    rules[67] = new Rule(-17, new int[]{-17,23,66});
    rules[68] = new Rule(-17, new int[]{-17,42,-17});
    rules[69] = new Rule(-17, new int[]{-17,41,-17});
    rules[70] = new Rule(-17, new int[]{43,-17});
    rules[71] = new Rule(-17, new int[]{-17,32,-17});
    rules[72] = new Rule(-17, new int[]{-17,33,-17});
    rules[73] = new Rule(-17, new int[]{-17,44,-17});
    rules[74] = new Rule(-17, new int[]{-17,36,-17});
    rules[75] = new Rule(-17, new int[]{-17,35,-17});
    rules[76] = new Rule(-17, new int[]{-17,56,-17,57});
    rules[77] = new Rule(-17, new int[]{-17,63,60});
    rules[78] = new Rule(-17, new int[]{8});
    rules[79] = new Rule(-17, new int[]{9});
    rules[80] = new Rule(-17, new int[]{61});
    rules[81] = new Rule(-17, new int[]{62});
    rules[82] = new Rule(-17, new int[]{13});
    rules[83] = new Rule(-17, new int[]{66});
    rules[84] = new Rule(-17, new int[]{22});
    rules[85] = new Rule(-17, new int[]{15,24,56,-17,57});
    rules[86] = new Rule(-17, new int[]{15,66,54,55});
    rules[87] = new Rule(-17, new int[]{-19});
    rules[88] = new Rule(-17, new int[]{-22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // GOAL -> MAIN_CLASS, CLASS_LIST
{ Helpers.WriteDebug("Found a GOAL."); CurrentSemanticValue = new Goal((MainClass)ValueStack[ValueStack.Depth-2], (ClassList)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 3: // MAIN_CLASS -> Class, Identifier, LBrace, Public, Static, Void, Main, 
              //               LParenthesis, String, LBracket, RBracket, Identifier, 
              //               RParenthesis, STATEMENT, RBrace
{ Helpers.WriteDebug("Found a MAIN_CLASS."); CurrentSemanticValue = new MainClass(ValueStack[ValueStack.Depth-14].Text, ValueStack[ValueStack.Depth-4].Text, (Statement)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-14].Location); }
        break;
      case 4: // CLASS_LIST -> CLASS_LIST, CLASS_DECLARATION
{ ((ClassList)ValueStack[ValueStack.Depth-2]).Add((AstClass)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 5: // CLASS_LIST -> /* empty */
{ Helpers.WriteDebug("Found a CLASS_LIST."); CurrentSemanticValue = new ClassList(); }
        break;
      case 6: // CLASS_DECLARATION -> Class, Identifier, CLASS_EXTENSION, LBrace, 
              //                      CLASS_DECLARATION_LIST, RBrace
{ Helpers.WriteDebug("Found a CLASS_DECLARATION."); CurrentSemanticValue = new AstClass(ValueStack[ValueStack.Depth-5].Text, (ClassExtension)ValueStack[ValueStack.Depth-4], (ClassDeclarationList)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-5].Location); }
        break;
      case 7: // CLASS_EXTENSION -> Extends, Identifier
{ Helpers.WriteDebug("Found a CLASS_EXTENSION."); CurrentSemanticValue = new ClassExtension(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 9: // CLASS_DECLARATION_LIST -> CLASS_DECLARATION_LIST, DECLARATION
{ ((ClassDeclarationList)ValueStack[ValueStack.Depth-2]).Add((Declaration)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 10: // CLASS_DECLARATION_LIST -> /* empty */
{ Helpers.WriteDebug("Found a CLASS_DECLARATION_LIST."); CurrentSemanticValue = new ClassDeclarationList(); }
        break;
      case 11: // DECLARATION -> VAR_DECLARATION
{ CurrentSemanticValue = new Property(((Variable)ValueStack[ValueStack.Depth-1]).Name, ((Variable)ValueStack[ValueStack.Depth-1]).AstType, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 12: // DECLARATION -> METHOD_DECLARATION
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // STATEMENT_LIST -> STATEMENT_LIST, STATEMENT
{ ((StatementList)ValueStack[ValueStack.Depth-2]).Add((Statement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 14: // STATEMENT_LIST -> /* empty */
{ Helpers.WriteDebug("Found a STATEMENT_LIST."); CurrentSemanticValue = new StatementList(); }
        break;
      case 15: // VAR_DECLARATION -> TYPE, Identifier, Semicolon
{ Helpers.WriteDebug("Found a VAR_DECLARATION."); CurrentSemanticValue = new Variable(ValueStack[ValueStack.Depth-2].Text, (AstType)ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 16: // ARGUMENT -> TYPE, Identifier
{ Helpers.WriteDebug("Found a ARGUMENT."); CurrentSemanticValue = new Argument(ValueStack[ValueStack.Depth-1].Text, (AstType)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 17: // ARGUMENT_LIST -> ARGUMENT, CONTINUED_ARGUMENT_LIST
{ Helpers.WriteDebug("Found a ARGUMENT_LIST."); CurrentSemanticValue = new ArgumentList(); ((ArgumentList)CurrentSemanticValue).Add((Argument)ValueStack[ValueStack.Depth-2]); ((ArgumentList)CurrentSemanticValue).AddRange(((ContinuedArgumentList)ValueStack[ValueStack.Depth-1])); }
        break;
      case 18: // ARGUMENT_LIST -> /* empty */
{ Helpers.WriteDebug("Found a ARGUMENT_LIST."); CurrentSemanticValue = new ArgumentList(); }
        break;
      case 19: // CONTINUED_ARGUMENT_LIST -> CONTINUED_ARGUMENT_LIST, Comma, ARGUMENT
{ ((ContinuedArgumentList)ValueStack[ValueStack.Depth-3]).Add((Argument)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 20: // CONTINUED_ARGUMENT_LIST -> /* empty */
{ Helpers.WriteDebug("Found a CONTINUED_ARGUMENT_LIST."); CurrentSemanticValue = new ContinuedArgumentList(); }
        break;
      case 21: // METHOD_DECLARATION -> Public, TYPE, Identifier, LParenthesis, ARGUMENT_LIST, 
               //                       RParenthesis, STATEMENT
{ Helpers.WriteDebug("Found a MEHOD_DECLARATION."); CurrentSemanticValue = new Method(ValueStack[ValueStack.Depth-5].Text, (AstType)ValueStack[ValueStack.Depth-6], (ArgumentList)ValueStack[ValueStack.Depth-3], (Statement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-5].Location); }
        break;
      case 22: // METHOD_DECLARATION -> Public, Void, Identifier, LParenthesis, ARGUMENT_LIST, 
               //                       RParenthesis, STATEMENT
{ Helpers.WriteDebug("Found a MEHOD_DECLARATION."); CurrentSemanticValue = new Method(ValueStack[ValueStack.Depth-5].Text, null, (ArgumentList)ValueStack[ValueStack.Depth-3], (Statement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-5].Location); }
        break;
      case 23: // TYPE -> Int, LBracket, RBracket
{ Helpers.WriteDebug("Found a TYPE_INT_ARRAY."); CurrentSemanticValue = new IntArray(ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 24: // TYPE -> Boolean
{ Helpers.WriteDebug("Found a TYPE_BOOLEAN."); CurrentSemanticValue = new AstBoolean(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 25: // TYPE -> Int
{ Helpers.WriteDebug("Found a TYPE_INT."); CurrentSemanticValue = new Int(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 26: // TYPE -> String
{ Helpers.WriteDebug("Found a TYPE_STRING."); CurrentSemanticValue = new AstString(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 27: // TYPE -> Identifier
{ Helpers.WriteDebug("Found a TYPE_IDENTIFIER."); CurrentSemanticValue = new Custom(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 28: // STATEMENT -> VAR_DECLARATION
{ Helpers.WriteDebug("Found a STATEMENT_VARIABLE_DECLARATION."); CurrentSemanticValue = new VariableDeclaration(((Variable)ValueStack[ValueStack.Depth-1]).AstType, ((Variable)ValueStack[ValueStack.Depth-1]).Name, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 29: // STATEMENT -> LBrace, STATEMENT_LIST, RBrace
{ Helpers.WriteDebug("Found a STATEMENT_BLOCK."); CurrentSemanticValue = new Block((StatementList)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 30: // STATEMENT -> If, LParenthesis, EXPRESSION, RParenthesis, STATEMENT, Else, 
               //              STATEMENT
{ Helpers.WriteDebug("Found an IF_ELSE."); CurrentSemanticValue = new If((Expression)ValueStack[ValueStack.Depth-5], (Statement)ValueStack[ValueStack.Depth-3], (Statement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-7].Location); }
        break;
      case 31: // STATEMENT -> While, LParenthesis, EXPRESSION, RParenthesis, STATEMENT
{ Helpers.WriteDebug("Found a WHILE."); CurrentSemanticValue = new While((Expression)ValueStack[ValueStack.Depth-3], (Statement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-5].Location); }
        break;
      case 32: // STATEMENT -> For, LParenthesis, SP_EXPRESSION_STATEMENT, Semicolon, EXPRESSION, 
               //              Semicolon, EXPRESSION_STATEMENT, RParenthesis, STATEMENT
{ Helpers.WriteDebug("Found a FOR."); CurrentSemanticValue = new For((ExpressionStatement)ValueStack[ValueStack.Depth-7], (Expression)ValueStack[ValueStack.Depth-5], (ExpressionStatement)ValueStack[ValueStack.Depth-3], (Statement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-9].Location); }
        break;
      case 33: // STATEMENT -> Return, EXPRESSION, Semicolon
{ Helpers.WriteDebug("Found a RETURN"); CurrentSemanticValue = new Return((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 34: // STATEMENT -> Return, Semicolon
{ Helpers.WriteDebug("Found a RETURN"); CurrentSemanticValue = new Return(null, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 35: // STATEMENT -> SP_EXPRESSION_STATEMENT, Semicolon
{ Helpers.WriteDebug("Found an EXPRESSION STATEMENT."); CurrentSemanticValue = new ExpressionStatementStatement((ExpressionStatement)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 36: // SP_EXPRESSION_STATEMENT -> TYPE, Identifier, Becomes, EXPRESSION
{ Helpers.WriteDebug("Found an DECLARATION_ASSIGNMENT."); CurrentSemanticValue = new DeclarationAssignment(ValueStack[ValueStack.Depth-3].Text, (AstType)ValueStack[ValueStack.Depth-4], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 38: // EXPRESSION_STATEMENT -> Identifier, Becomes, EXPRESSION
{ Helpers.WriteDebug("Found an ASSIGNMENT."); CurrentSemanticValue = new Assignment(ValueStack[ValueStack.Depth-3].Text, (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 39: // EXPRESSION_STATEMENT -> EXPRESSION, LBracket, EXPRESSION, RBracket, Becomes, 
               //                         EXPRESSION
{ Helpers.WriteDebug("Found an ARRAY_ASSIGNMENT."); CurrentSemanticValue = new ArrayAssignment((Expression)ValueStack[ValueStack.Depth-6], (Expression)ValueStack[ValueStack.Depth-4], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-6].Location); }
        break;
      case 40: // EXPRESSION_STATEMENT -> EXPRESSION, Dot, Identifier, LParenthesis, 
               //                         EXPRESSION_LIST, RParenthesis
{ Helpers.WriteDebug("Found a METHOD_CALL."); CurrentSemanticValue = new MethodCall((Expression)ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4].Text, (ExpressionList)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-6].Location); }
        break;
      case 41: // EXPRESSION_STATEMENT -> Println, LParenthesis, EXPRESSION, RParenthesis
{ Helpers.WriteDebug("Found a PRINTLN."); CurrentSemanticValue = new CompilerFunction((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-4].Text, ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 42: // EXPRESSION_STATEMENT -> Println, LParenthesis, RParenthesis
{ Helpers.WriteDebug("Found a PRINTLN."); CurrentSemanticValue = new CompilerFunction(null, ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 43: // EXPRESSION_STATEMENT -> Destroy, LParenthesis, EXPRESSION, RParenthesis
{ Helpers.WriteDebug("Found a DESTROY."); CurrentSemanticValue = new CompilerFunction((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-4].Text, ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 44: // EXPRESSION_STATEMENT -> Readln, LParenthesis, RParenthesis
{ Helpers.WriteDebug("Found a READLN."); CurrentSemanticValue = new CompilerFunction(null, ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 45: // EXPRESSION_STATEMENT -> Exception, LParenthesis, EXPRESSION, RParenthesis
{ Helpers.WriteDebug("Found an EXCEPTION."); CurrentSemanticValue = new CompilerFunction((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-4].Text, ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 46: // EXPRESSION_STATEMENT -> Atol, LParenthesis, EXPRESSION, RParenthesis
{ Helpers.WriteDebug("Found an ATOL."); CurrentSemanticValue = new CompilerFunction((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-4].Text, ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 47: // EXPRESSION_STATEMENT -> Identifier, PlusPlus
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-2].Text, ValueStack[ValueStack.Depth-1].Text, null, true, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 48: // EXPRESSION_STATEMENT -> Identifier, MinusMinus
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-2].Text, ValueStack[ValueStack.Depth-1].Text, null, true, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 49: // EXPRESSION_STATEMENT -> PlusPlus, Identifier
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-2].Text, null, false, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 50: // EXPRESSION_STATEMENT -> MinusMinus, Identifier
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-2].Text, null, false, ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 51: // EXPRESSION_STATEMENT -> Identifier, PlusBecomes, EXPRESSION
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-2].Text, (Expression)ValueStack[ValueStack.Depth-1], false, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 52: // EXPRESSION_STATEMENT -> Identifier, MinusBecomes, EXPRESSION
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-2].Text, (Expression)ValueStack[ValueStack.Depth-1], false, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 53: // EXPRESSION_STATEMENT -> Identifier, MultiplyBecomes, EXPRESSION
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-2].Text, (Expression)ValueStack[ValueStack.Depth-1], false, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 54: // EXPRESSION_STATEMENT -> Identifier, DivideBecomes, EXPRESSION
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-2].Text, (Expression)ValueStack[ValueStack.Depth-1], false, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 55: // EXPRESSION_STATEMENT -> Identifier, ModBecomes, EXPRESSION
{ Helpers.WriteDebug("Found an INCREMENTER."); CurrentSemanticValue = new Incrementer(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-2].Text, (Expression)ValueStack[ValueStack.Depth-1], false, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 56: // EXPRESSION_LIST -> EXPRESSION, CONTINUED_EXPR_LIST
{ Helpers.WriteDebug("Found a EXPRESSION_LIST."); CurrentSemanticValue = new ExpressionList(); ((ExpressionList)CurrentSemanticValue).Add((Expression)ValueStack[ValueStack.Depth-2]); ((ExpressionList)CurrentSemanticValue).AddRange(((ContinuedExpressionList)ValueStack[ValueStack.Depth-1])); }
        break;
      case 57: // EXPRESSION_LIST -> /* empty */
{ Helpers.WriteDebug("Found a EXPRESSION_LIST."); CurrentSemanticValue = new ExpressionList(); }
        break;
      case 58: // CONTINUED_EXPR_LIST -> CONTINUED_EXPR_LIST, Comma, EXPRESSION
{ ((ContinuedExpressionList)ValueStack[ValueStack.Depth-3]).Add((Expression)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 59: // CONTINUED_EXPR_LIST -> /* empty */
{ Helpers.WriteDebug("Found a CONTINUED_EXPR_LIST."); CurrentSemanticValue = new ContinuedExpressionList(); }
        break;
      case 60: // PAR_EXPRESSION -> LParenthesis, EXPRESSION, RParenthesis
{ Helpers.WriteDebug("Found a PARENTHETICAL_EXPRESSION."); CurrentSemanticValue = new Parenthetical((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 61: // EXPRESSION -> EXPRESSION, And, EXPRESSION
{ Helpers.WriteDebug("Found an AND."); CurrentSemanticValue = new And((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 62: // EXPRESSION -> EXPRESSION, Or, EXPRESSION
{ Helpers.WriteDebug("Found an OR."); CurrentSemanticValue = new Or((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 63: // EXPRESSION -> EXPRESSION, Less, EXPRESSION
{ Helpers.WriteDebug("Found a LESS."); CurrentSemanticValue = new Less((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 64: // EXPRESSION -> EXPRESSION, Greater, EXPRESSION
{ Helpers.WriteDebug("Found a GREATER."); CurrentSemanticValue = new Greater((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 65: // EXPRESSION -> EXPRESSION, LessEqual, EXPRESSION
{ Helpers.WriteDebug("Found a LESS_EQUAL."); CurrentSemanticValue = new LessEqual((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 66: // EXPRESSION -> EXPRESSION, GreaterEqual, EXPRESSION
{ Helpers.WriteDebug("Found a GREATER_EQUAL."); CurrentSemanticValue = new GreaterEqual((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 67: // EXPRESSION -> EXPRESSION, Instanceof, Identifier
{ Helpers.WriteDebug("Found a INSTANCEOF."); CurrentSemanticValue = new Instanceof((Expression)ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 68: // EXPRESSION -> EXPRESSION, NotEqual, EXPRESSION
{ Helpers.WriteDebug("Found a NOT_EQUAL."); CurrentSemanticValue = new NotEqual((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 69: // EXPRESSION -> EXPRESSION, Equal, EXPRESSION
{ Helpers.WriteDebug("Found an EQUAL."); CurrentSemanticValue = new Equal((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 70: // EXPRESSION -> Not, EXPRESSION
{ Helpers.WriteDebug("Found a NOT_EXPRESSION."); CurrentSemanticValue = new Not((Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2].Location); }
        break;
      case 71: // EXPRESSION -> EXPRESSION, Plus, EXPRESSION
{ Helpers.WriteDebug("Found a PLUS."); CurrentSemanticValue = new Plus((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 72: // EXPRESSION -> EXPRESSION, Minus, EXPRESSION
{ Helpers.WriteDebug("Found a MINUS."); CurrentSemanticValue = new Minus((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 73: // EXPRESSION -> EXPRESSION, Mod, EXPRESSION
{ Helpers.WriteDebug("Found a MOD."); CurrentSemanticValue = new Mod((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 74: // EXPRESSION -> EXPRESSION, Divide, EXPRESSION
{ Helpers.WriteDebug("Found a DIVIDE."); CurrentSemanticValue = new Divide((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 75: // EXPRESSION -> EXPRESSION, Multiply, EXPRESSION
{ Helpers.WriteDebug("Found a MULTIPLY."); CurrentSemanticValue = new Multiply((Expression)ValueStack[ValueStack.Depth-3], (Expression)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 76: // EXPRESSION -> EXPRESSION, LBracket, EXPRESSION, RBracket
{ Helpers.WriteDebug("Found an ARRAY_ACCESS."); CurrentSemanticValue = new ArrayAccess((Expression)ValueStack[ValueStack.Depth-4], (Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-4].Location); }
        break;
      case 77: // EXPRESSION -> EXPRESSION, Dot, Length
{ Helpers.WriteDebug("Found a DOT_LENGTH."); CurrentSemanticValue = new ArrayLength((Expression)ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-3].Location); }
        break;
      case 78: // EXPRESSION -> Integer
{ Helpers.WriteDebug("Found an INTEGER."); CurrentSemanticValue = new Integer(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 79: // EXPRESSION -> StringLiteral
{ Helpers.WriteDebug("Found a STRING."); CurrentSemanticValue = new Ast.String(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 80: // EXPRESSION -> True
{ Helpers.WriteDebug("Found a TRUE."); CurrentSemanticValue = new True(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 81: // EXPRESSION -> False
{ Helpers.WriteDebug("Found a FALSE."); CurrentSemanticValue = new False(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 82: // EXPRESSION -> Null
{ Helpers.WriteDebug("Found a TRUE."); CurrentSemanticValue = new Null(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 83: // EXPRESSION -> Identifier
{ Helpers.WriteDebug(string.Format("Found an EXPRESSION_IDENTIFIER")); CurrentSemanticValue = new IdentifierExpression(ValueStack[ValueStack.Depth-1].Text, ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 84: // EXPRESSION -> This
{ Helpers.WriteDebug("Found a THIS."); CurrentSemanticValue = new This(ValueStack[ValueStack.Depth-1].Location); }
        break;
      case 85: // EXPRESSION -> New, Int, LBracket, EXPRESSION, RBracket
{ Helpers.WriteDebug("Found a NEW_ARRAY."); CurrentSemanticValue = new NewArray((Expression)ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-5].Location); }
        break;
      case 86: // EXPRESSION -> New, Identifier, LParenthesis, RParenthesis
{ Helpers.WriteDebug("Found an NEW_OBJECT."); CurrentSemanticValue = new NewObject(ValueStack[ValueStack.Depth-3].Text, ValueStack[ValueStack.Depth-3].Location); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
