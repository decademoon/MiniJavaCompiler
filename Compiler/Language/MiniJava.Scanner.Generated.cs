//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  AJRON
//  DateTime: 2016-03-11 2:19:35 PM
//  UserName: twitc
//  GPLEX input file <C:\Users\twitc\OneDrive\Business\School\CSEPMP\2016_01\Project\csep501-16wi-af\Compiler\\language\MiniJava.Language.analyzer.lex - 2016-03-11 2:06:51 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: compressNext, persistBuffer, noEmbedBuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace Compiler.Language
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class MiniJavaScanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class MiniJavaScanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 151;
        const int initial = 152;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {152, 0};

    static Table[] NxS = new Table[203] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[   2] */ // Shortest string "\t"
      new Table(9, 24, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 2}),
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   4] */ // Shortest string "\r"
      new Table(10, 1, -1, new short[] {3}),
/* NxS[   5] */ // Shortest string "!"
      new Table(61, 1, -1, new short[] {151}),
/* NxS[   6] */ // Shortest string "\""
      new Table(34, 59, 201, new short[] {150, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 202}),
/* NxS[   7] */ // Shortest string "%"
      new Table(61, 1, -1, new short[] {149}),
/* NxS[   8] */ // Shortest string "&"
      new Table(38, 1, -1, new short[] {148}),
/* NxS[   9] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  10] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  11] */ // Shortest string "*"
      new Table(61, 1, -1, new short[] {147}),
/* NxS[  12] */ // Shortest string "+"
      new Table(43, 19, -1, new short[] {145, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146}),
/* NxS[  13] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  14] */ // Shortest string "-"
      new Table(45, 17, -1, new short[] {143, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 144}),
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "."
/* NxS[  16] */ // Shortest string "/"
      new Table(42, 20, -1, new short[] {199, -1, -1, -1, -1, 141, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142}),
/* NxS[  17] */ // Shortest string "0"
      new Table(48, 73, -1, new short[] {18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 198}),
/* NxS[  18] */ // Shortest string "1"
      new Table(48, 10, -1, new short[] {18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18}),
/* NxS[  19] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  20] */ // Shortest string "<"
      new Table(61, 1, -1, new short[] {139}),
/* NxS[  21] */ // Shortest string "="
      new Table(61, 1, -1, new short[] {138}),
/* NxS[  22] */ // Shortest string ">"
      new Table(61, 1, -1, new short[] {137}),
/* NxS[  23] */ // Shortest string "A"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  24] */ // Shortest string "S"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 122, 23, 
          23, 23, 23, 123, 23}),
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  27] */ // Shortest string "b"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 116, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  28] */ // Shortest string "c"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 112, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  29] */ // Shortest string "e"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 103, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 104, 23, 23}),
/* NxS[  30] */ // Shortest string "f"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 97, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 98, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  31] */ // Shortest string "i"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          86, 23, 23, 23, 23, 23, 23, 23, 87, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  32] */ // Shortest string "l"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 81, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  33] */ // Shortest string "m"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 78, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  34] */ // Shortest string "n"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 73, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 74, 
          23, 23, 23, 23, 23}),
/* NxS[  35] */ // Shortest string "p"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 68, 
          23, 23, 23, 23, 23}),
/* NxS[  36] */ // Shortest string "r"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 63, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  37] */ // Shortest string "s"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 58, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  38] */ // Shortest string "t"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 52, 23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  39] */ // Shortest string "v"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 49, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  40] */ // Shortest string "w"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 45, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  42] */ // Shortest string "|"
      new Table(124, 1, -1, new short[] {44}),
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  44] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  45] */ // Shortest string "wh"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 46, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  46] */ // Shortest string "whi"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 47, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  47] */ // Shortest string "whil"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 48, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  48] */ // Shortest string "while"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  49] */ // Shortest string "vo"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 50, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  50] */ // Shortest string "voi"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 51, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  51] */ // Shortest string "void"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  52] */ // Shortest string "th"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 56, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  53] */ // Shortest string "tr"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 54, 
          23, 23, 23, 23, 23}),
/* NxS[  54] */ // Shortest string "tru"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 55, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  55] */ // Shortest string "true"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  56] */ // Shortest string "thi"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 57, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  57] */ // Shortest string "this"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  58] */ // Shortest string "st"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 59, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  59] */ // Shortest string "sta"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  60] */ // Shortest string "stat"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 61, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  61] */ // Shortest string "stati"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 62, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  62] */ // Shortest string "static"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  63] */ // Shortest string "re"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 64, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  64] */ // Shortest string "ret"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 65, 
          23, 23, 23, 23, 23}),
/* NxS[  65] */ // Shortest string "retu"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 66, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  66] */ // Shortest string "retur"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 67, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  67] */ // Shortest string "return"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  68] */ // Shortest string "pu"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 69, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  69] */ // Shortest string "pub"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 70, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  70] */ // Shortest string "publ"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 71, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  71] */ // Shortest string "publi"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 72, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  72] */ // Shortest string "public"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  73] */ // Shortest string "ne"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 77, 23, 23, 23}),
/* NxS[  74] */ // Shortest string "nu"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 75, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  75] */ // Shortest string "nul"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 76, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  76] */ // Shortest string "null"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  77] */ // Shortest string "new"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  78] */ // Shortest string "ma"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 79, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  79] */ // Shortest string "mai"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 80, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  80] */ // Shortest string "main"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  81] */ // Shortest string "le"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 82, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  82] */ // Shortest string "len"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 83, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  83] */ // Shortest string "leng"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 84, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  84] */ // Shortest string "lengt"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 85, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  85] */ // Shortest string "length"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  86] */ // Shortest string "if"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  87] */ // Shortest string "in"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 88, 89, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  88] */ // Shortest string "ins"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 90, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  89] */ // Shortest string "int"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  90] */ // Shortest string "inst"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 91, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  91] */ // Shortest string "insta"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 92, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  92] */ // Shortest string "instan"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 93, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  93] */ // Shortest string "instanc"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 94, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  94] */ // Shortest string "instance"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 95, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  95] */ // Shortest string "instanceo"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          96, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  96] */ // Shortest string "instanceof"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  97] */ // Shortest string "fa"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 100, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  98] */ // Shortest string "fo"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 99, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[  99] */ // Shortest string "for"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 100] */ // Shortest string "fal"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 101, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 101] */ // Shortest string "fals"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 102, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 102] */ // Shortest string "false"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 103] */ // Shortest string "el"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 110, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 104] */ // Shortest string "ex"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 105, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 105] */ // Shortest string "ext"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 106, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 106] */ // Shortest string "exte"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 107, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 107] */ // Shortest string "exten"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 108, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 108] */ // Shortest string "extend"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 109, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 109] */ // Shortest string "extends"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 110] */ // Shortest string "els"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 111, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 111] */ // Shortest string "else"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 112] */ // Shortest string "cl"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 113, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 113] */ // Shortest string "cla"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 114, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 114] */ // Shortest string "clas"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 115, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 115] */ // Shortest string "class"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 116] */ // Shortest string "bo"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 117, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 117] */ // Shortest string "boo"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 118, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 118] */ // Shortest string "bool"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 119, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 119] */ // Shortest string "boole"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 120, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 120] */ // Shortest string "boolea"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 121, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 121] */ // Shortest string "boolean"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 122] */ // Shortest string "St"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 133, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 123] */ // Shortest string "Sy"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 124, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 124] */ // Shortest string "Sys"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 125, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 125] */ // Shortest string "Syst"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 126, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 126] */ // Shortest string "Syste"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 127, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 127] */ // Shortest string "System"
      new Table(46, 77, -1, new short[] {153, -1, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23}),
/* NxS[ 128] */ new Table(0, 0, -1, null), // Shortest string "System.out.println"
/* NxS[ 129] */ new Table(0, 0, -1, null), // Shortest string "System.in.readln"
/* NxS[ 130] */ new Table(0, 0, -1, null), // Shortest string "System.compiler.exception"
/* NxS[ 131] */ new Table(0, 0, -1, null), // Shortest string "System.compiler.destroy"
/* NxS[ 132] */ new Table(0, 0, -1, null), // Shortest string "System.compiler.atol"
/* NxS[ 133] */ // Shortest string "Str"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 134, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 134] */ // Shortest string "Stri"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 135, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 135] */ // Shortest string "Strin"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 136, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 136] */ // Shortest string "String"
      new Table(48, 75, -1, new short[] {23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, -1, -1, -1, 23, -1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23}),
/* NxS[ 137] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 138] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[ 139] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[ 140] */ // Shortest string "0x0"
      new Table(48, 55, -1, new short[] {140, 140, 140, 140, 140, 140, 
          140, 140, 140, 140, -1, -1, -1, -1, -1, -1, -1, 140, 140, 140, 140, 140, 
          140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, 140, 140, 140, 140, 
          140}),
/* NxS[ 141] */ // Shortest string "//"
      new Table(10, 1, 141, new short[] {3}),
/* NxS[ 142] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[ 143] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[ 144] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[ 145] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[ 146] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[ 147] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[ 148] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[ 149] */ new Table(0, 0, -1, null), // Shortest string "%="
/* NxS[ 150] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[ 151] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[ 152] */ // Shortest string ""
      new Table(9, 117, 1, new short[] {2, 3, 1, 1, 4, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 2, 5, 6, 1, 1, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 
          16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 1, 19, 20, 21, 22, 
          1, 1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 25, 1, 26, 1, 
          23, 1, 23, 27, 28, 23, 29, 30, 23, 23, 31, 23, 23, 32, 33, 34, 
          23, 35, 23, 36, 37, 38, 23, 39, 40, 23, 23, 23, 41, 42, 43}),
/* NxS[ 153] */ // Shortest string "System."
      new Table(99, 13, -1, new short[] {154, -1, -1, -1, -1, -1, 
          155, -1, -1, -1, -1, -1, 156}),
/* NxS[ 154] */ // Shortest string "System.c"
      new Table(111, 1, -1, new short[] {173}),
/* NxS[ 155] */ // Shortest string "System.i"
      new Table(110, 1, -1, new short[] {166}),
/* NxS[ 156] */ // Shortest string "System.o"
      new Table(117, 1, -1, new short[] {157}),
/* NxS[ 157] */ // Shortest string "System.ou"
      new Table(116, 1, -1, new short[] {158}),
/* NxS[ 158] */ // Shortest string "System.out"
      new Table(46, 1, -1, new short[] {159}),
/* NxS[ 159] */ // Shortest string "System.out."
      new Table(112, 1, -1, new short[] {160}),
/* NxS[ 160] */ // Shortest string "System.out.p"
      new Table(114, 1, -1, new short[] {161}),
/* NxS[ 161] */ // Shortest string "System.out.pr"
      new Table(105, 1, -1, new short[] {162}),
/* NxS[ 162] */ // Shortest string "System.out.pri"
      new Table(110, 1, -1, new short[] {163}),
/* NxS[ 163] */ // Shortest string "System.out.prin"
      new Table(116, 1, -1, new short[] {164}),
/* NxS[ 164] */ // Shortest string "System.out.print"
      new Table(108, 1, -1, new short[] {165}),
/* NxS[ 165] */ // Shortest string "System.out.printl"
      new Table(110, 1, -1, new short[] {128}),
/* NxS[ 166] */ // Shortest string "System.in"
      new Table(46, 1, -1, new short[] {167}),
/* NxS[ 167] */ // Shortest string "System.in."
      new Table(114, 1, -1, new short[] {168}),
/* NxS[ 168] */ // Shortest string "System.in.r"
      new Table(101, 1, -1, new short[] {169}),
/* NxS[ 169] */ // Shortest string "System.in.re"
      new Table(97, 1, -1, new short[] {170}),
/* NxS[ 170] */ // Shortest string "System.in.rea"
      new Table(100, 1, -1, new short[] {171}),
/* NxS[ 171] */ // Shortest string "System.in.read"
      new Table(108, 1, -1, new short[] {172}),
/* NxS[ 172] */ // Shortest string "System.in.readl"
      new Table(110, 1, -1, new short[] {129}),
/* NxS[ 173] */ // Shortest string "System.co"
      new Table(109, 1, -1, new short[] {174}),
/* NxS[ 174] */ // Shortest string "System.com"
      new Table(112, 1, -1, new short[] {175}),
/* NxS[ 175] */ // Shortest string "System.comp"
      new Table(105, 1, -1, new short[] {176}),
/* NxS[ 176] */ // Shortest string "System.compi"
      new Table(108, 1, -1, new short[] {177}),
/* NxS[ 177] */ // Shortest string "System.compil"
      new Table(101, 1, -1, new short[] {178}),
/* NxS[ 178] */ // Shortest string "System.compile"
      new Table(114, 1, -1, new short[] {179}),
/* NxS[ 179] */ // Shortest string "System.compiler"
      new Table(46, 1, -1, new short[] {180}),
/* NxS[ 180] */ // Shortest string "System.compiler."
      new Table(97, 5, -1, new short[] {181, -1, -1, 182, 183}),
/* NxS[ 181] */ // Shortest string "System.compiler.a"
      new Table(116, 1, -1, new short[] {196}),
/* NxS[ 182] */ // Shortest string "System.compiler.d"
      new Table(101, 1, -1, new short[] {191}),
/* NxS[ 183] */ // Shortest string "System.compiler.e"
      new Table(120, 1, -1, new short[] {184}),
/* NxS[ 184] */ // Shortest string "System.compiler.ex"
      new Table(99, 1, -1, new short[] {185}),
/* NxS[ 185] */ // Shortest string "System.compiler.exc"
      new Table(101, 1, -1, new short[] {186}),
/* NxS[ 186] */ // Shortest string "System.compiler.exce"
      new Table(112, 1, -1, new short[] {187}),
/* NxS[ 187] */ // Shortest string "System.compiler.excep"
      new Table(116, 1, -1, new short[] {188}),
/* NxS[ 188] */ // Shortest string "System.compiler.except"
      new Table(105, 1, -1, new short[] {189}),
/* NxS[ 189] */ // Shortest string "System.compiler.excepti"
      new Table(111, 1, -1, new short[] {190}),
/* NxS[ 190] */ // Shortest string "System.compiler.exceptio"
      new Table(110, 1, -1, new short[] {130}),
/* NxS[ 191] */ // Shortest string "System.compiler.de"
      new Table(115, 1, -1, new short[] {192}),
/* NxS[ 192] */ // Shortest string "System.compiler.des"
      new Table(116, 1, -1, new short[] {193}),
/* NxS[ 193] */ // Shortest string "System.compiler.dest"
      new Table(114, 1, -1, new short[] {194}),
/* NxS[ 194] */ // Shortest string "System.compiler.destr"
      new Table(111, 1, -1, new short[] {195}),
/* NxS[ 195] */ // Shortest string "System.compiler.destro"
      new Table(121, 1, -1, new short[] {131}),
/* NxS[ 196] */ // Shortest string "System.compiler.at"
      new Table(111, 1, -1, new short[] {197}),
/* NxS[ 197] */ // Shortest string "System.compiler.ato"
      new Table(108, 1, -1, new short[] {132}),
/* NxS[ 198] */ // Shortest string "0x"
      new Table(48, 55, -1, new short[] {140, 140, 140, 140, 140, 140, 
          140, 140, 140, 140, -1, -1, -1, -1, -1, -1, -1, 140, 140, 140, 140, 140, 
          140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, 140, 140, 140, 140, 
          140}),
/* NxS[ 199] */ // Shortest string "/*"
      new Table(42, 1, 199, new short[] {200}),
/* NxS[ 200] */ // Shortest string "/**"
      new Table(42, 6, 199, new short[] {200, 199, 199, 199, 199, 3}),
/* NxS[ 201] */ // Shortest string "\"\x01"
      new Table(34, 59, 201, new short[] {150, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 
          201, 201, 201, 201, 202}),
/* NxS[ 202] */ // Shortest string "\"\\"
      new Table(10, 1, 201, new short[] {-1}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal MiniJavaScanner(Stream file) {
            SetSource(file); // no unicode option
        }   
#endif // !NOFILES

     internal MiniJavaScanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Token.EOF;
            break;
        case 1: // Recognized '.',	Shortest string "\x01"
        case 6: // Recognized '.',	Shortest string "\""
        case 8: // Recognized '.',	Shortest string "&"
        case 42: // Recognized '.',	Shortest string "|"
return GetToken(Token.Unrecognized);
            break;
        case 2: // Recognized '{WhiteSpace}|{OneLineComment}|{MultiLineComment}',	Shortest string "\t"
        case 3: // Recognized '{WhiteSpace}|{OneLineComment}|{MultiLineComment}',	Shortest string "\n"
        case 4: // Recognized '{WhiteSpace}|{OneLineComment}|{MultiLineComment}',	Shortest string "\r"
        case 141: // Recognized '{WhiteSpace}|{OneLineComment}|{MultiLineComment}',	Shortest string "//"
/* skip */

/* Reserved words. */
            break;
        case 5: // Recognized '"!"',	Shortest string "!"
return GetToken(Token.Not);
            break;
        case 7: // Recognized '"%"',	Shortest string "%"
return GetToken(Token.Mod);
            break;
        case 9: // Recognized '"("',	Shortest string "("
return GetToken(Token.LParenthesis);
            break;
        case 10: // Recognized '")"',	Shortest string ")"
return GetToken(Token.RParenthesis);
            break;
        case 11: // Recognized '"*"',	Shortest string "*"
return GetToken(Token.Multiply);
            break;
        case 12: // Recognized '"+"',	Shortest string "+"
return GetToken(Token.Plus);
            break;
        case 13: // Recognized '","',	Shortest string ","
return GetToken(Token.Comma);
            break;
        case 14: // Recognized '"-"',	Shortest string "-"
return GetToken(Token.Minus);
            break;
        case 15: // Recognized '"."',	Shortest string "."
return GetToken(Token.Dot);
            break;
        case 16: // Recognized '"/"',	Shortest string "/"
return GetToken(Token.Divide);
            break;
        case 17: // Recognized '{Number}',	Shortest string "0"
        case 18: // Recognized '{Number}',	Shortest string "1"
        case 140: // Recognized '{Number}',	Shortest string "0x0"
return GetToken(Token.Integer);
            break;
        case 19: // Recognized '";"',	Shortest string ";"
return GetToken(Token.Semicolon);
            break;
        case 20: // Recognized '"<"',	Shortest string "<"
return GetToken(Token.Less);
            break;
        case 21: // Recognized '"="',	Shortest string "="
return GetToken(Token.Becomes);
            break;
        case 22: // Recognized '">"',	Shortest string ">"
return GetToken(Token.Greater);
            break;
        case 23: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "A"
        case 24: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "S"
        case 27: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "b"
        case 28: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "c"
        case 29: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "e"
        case 30: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "f"
        case 31: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "i"
        case 32: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "l"
        case 33: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "m"
        case 34: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "n"
        case 35: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "p"
        case 36: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "r"
        case 37: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "s"
        case 38: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "t"
        case 39: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "v"
        case 40: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "w"
        case 45: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "wh"
        case 46: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "whi"
        case 47: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "whil"
        case 49: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "vo"
        case 50: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "voi"
        case 52: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "th"
        case 53: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "tr"
        case 54: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "tru"
        case 56: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "thi"
        case 58: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "st"
        case 59: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "sta"
        case 60: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "stat"
        case 61: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "stati"
        case 63: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "re"
        case 64: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ret"
        case 65: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "retu"
        case 66: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "retur"
        case 68: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "pu"
        case 69: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "pub"
        case 70: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "publ"
        case 71: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "publi"
        case 73: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ne"
        case 74: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "nu"
        case 75: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "nul"
        case 78: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ma"
        case 79: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "mai"
        case 81: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "le"
        case 82: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "len"
        case 83: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "leng"
        case 84: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "lengt"
        case 87: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "in"
        case 88: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ins"
        case 90: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "inst"
        case 91: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "insta"
        case 92: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "instan"
        case 93: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "instanc"
        case 94: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "instance"
        case 95: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "instanceo"
        case 97: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "fa"
        case 98: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "fo"
        case 100: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "fal"
        case 101: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "fals"
        case 103: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "el"
        case 104: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ex"
        case 105: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "ext"
        case 106: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "exte"
        case 107: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "exten"
        case 108: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "extend"
        case 110: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "els"
        case 112: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "cl"
        case 113: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "cla"
        case 114: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "clas"
        case 116: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "bo"
        case 117: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "boo"
        case 118: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "bool"
        case 119: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "boole"
        case 120: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "boolea"
        case 122: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "St"
        case 123: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Sy"
        case 124: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Sys"
        case 125: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Syst"
        case 126: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Syste"
        case 127: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "System"
        case 133: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Str"
        case 134: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Stri"
        case 135: // Recognized '({Letter}|_)({Letter}|{Digit}|_)*',	Shortest string "Strin"
return GetToken(Token.Identifier);
            break;
        case 25: // Recognized '"["',	Shortest string "["
return GetToken(Token.LBracket);
            break;
        case 26: // Recognized '"]"',	Shortest string "]"
return GetToken(Token.RBracket);
            break;
        case 41: // Recognized '"{"',	Shortest string "{"
return GetToken(Token.LBrace);
            break;
        case 43: // Recognized '"}"',	Shortest string "}"
return GetToken(Token.RBrace);
            break;
        case 44: // Recognized '"||"',	Shortest string "||"
return GetToken(Token.Or);
            break;
        case 48: // Recognized '"while"',	Shortest string "while"
return GetToken(Token.While);
            break;
        case 51: // Recognized '"void"',	Shortest string "void"
return GetToken(Token.Void);
            break;
        case 55: // Recognized '"true"',	Shortest string "true"
return GetToken(Token.True);
            break;
        case 57: // Recognized '"this"',	Shortest string "this"
return GetToken(Token.This);
            break;
        case 62: // Recognized '"static"',	Shortest string "static"
return GetToken(Token.Static);
            break;
        case 67: // Recognized '"return"',	Shortest string "return"
return GetToken(Token.Return);
            break;
        case 72: // Recognized '"public"',	Shortest string "public"
return GetToken(Token.Public);
            break;
        case 76: // Recognized '"null"',	Shortest string "null"
return GetToken(Token.Null);
            break;
        case 77: // Recognized '"new"',	Shortest string "new"
return GetToken(Token.New);
            break;
        case 80: // Recognized '"main"',	Shortest string "main"
return GetToken(Token.Main);
            break;
        case 85: // Recognized '"length"',	Shortest string "length"
return GetToken(Token.Length);
            break;
        case 86: // Recognized '"if"',	Shortest string "if"
return GetToken(Token.If);
            break;
        case 89: // Recognized '"int"',	Shortest string "int"
return GetToken(Token.Int);
            break;
        case 96: // Recognized '"instanceof"',	Shortest string "instanceof"
return GetToken(Token.Instanceof);
            break;
        case 99: // Recognized '"for"',	Shortest string "for"
return GetToken(Token.For);
            break;
        case 102: // Recognized '"false"',	Shortest string "false"
return GetToken(Token.False);
            break;
        case 109: // Recognized '"extends"',	Shortest string "extends"
return GetToken(Token.Extends);
            break;
        case 111: // Recognized '"else"',	Shortest string "else"
return GetToken(Token.Else);
            break;
        case 115: // Recognized '"class"',	Shortest string "class"
return GetToken(Token.Class);
            break;
        case 121: // Recognized '"boolean"',	Shortest string "boolean"
return GetToken(Token.Boolean);
            break;
        case 128: // Recognized '"System.out.println"',	Shortest string "System.out.println"
return GetToken(Token.Println);
            break;
        case 129: // Recognized '"System.in.readln"',	Shortest string "System.in.readln"
return GetToken(Token.Readln);
            break;
        case 130: // Recognized '"System.compiler.exception"',	Shortest string "System.compiler.exception"
return GetToken(Token.Exception);
            break;
        case 131: // Recognized '"System.compiler.destroy"',	Shortest string "System.compiler.destroy"
return GetToken(Token.Destroy);
            break;
        case 132: // Recognized '"System.compiler.atol"',	Shortest string "System.compiler.atol"
return GetToken(Token.Atol);
            break;
        case 136: // Recognized '"String"',	Shortest string "String"
return GetToken(Token.String);
            break;
        case 137: // Recognized '">="',	Shortest string ">="
return GetToken(Token.GreaterEqual);
            break;
        case 138: // Recognized '"=="',	Shortest string "=="
return GetToken(Token.Equal);
            break;
        case 139: // Recognized '"<="',	Shortest string "<="
return GetToken(Token.LessEqual);
            break;
        case 142: // Recognized '"/="',	Shortest string "/="
return GetToken(Token.DivideBecomes);
            break;
        case 143: // Recognized '"--"',	Shortest string "--"
return GetToken(Token.MinusMinus);
            break;
        case 144: // Recognized '"-="',	Shortest string "-="
return GetToken(Token.MinusBecomes);
            break;
        case 145: // Recognized '"++"',	Shortest string "++"
return GetToken(Token.PlusPlus);
            break;
        case 146: // Recognized '"+="',	Shortest string "+="
return GetToken(Token.PlusBecomes);
            break;
        case 147: // Recognized '"*="',	Shortest string "*="
return GetToken(Token.MultiplyBecomes);
            break;
        case 148: // Recognized '"&&"',	Shortest string "&&"
return GetToken(Token.And);
            break;
        case 149: // Recognized '"%="',	Shortest string "%="
return GetToken(Token.ModBecomes);
            break;
        case 150: // Recognized '\"(\\.|[^\\"])*\"',	Shortest string "\"\""
return GetToken(Token.StringLiteral);
            break;
        case 151: // Recognized '"!="',	Shortest string "!="
return GetToken(Token.NotEqual);
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
